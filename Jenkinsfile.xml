pipeline {
    agent none
    environment {
        REPO_URL = 'https://github.com/FlaBLorenzo/PracticasUnir.git'
        BRANCH_NAME = 'master'
        FLASK_APP_PATH = 'app/api.py'
        WIREMOCK_JAR_PATH = 'C:\\Users\\flavia.lorenzo\\Desktop\\UNIR\\wiremock-standalone-3.10.0.jar'
        WIREMOCK_ROOT_DIR = 'C:\\Users\\flavia.lorenzo\\Desktop\\UNIR\\helloworld-master\\test\\wiremock'
    }

    stages {
        stage('Get Code') {
            agent { label 'Principal' }
            when {
                branch 'feature_fix_racecond'
            }
            steps {
                echo "Executing on agent: ${env.NODE_NAME}"
                bat '''
                whoami
                hostname
                '''
                git url: REPO_URL, branch: 'feature_fix_racecond'
                stash includes: '**', name: 'source-code'
            }
        }

        stage('Build') {
            agent { label 'Principal' }
            steps {
                echo "Executing on agent: ${env.NODE_NAME}"
                bat '''
                whoami
                hostname
                '''
                echo 'Building Python Project'
                bat "dir"
            }
        }

        stage('Test') {
            parallel {
                stage('Unit Tests') {
                    agent { label 'unit-tests' }
                    when {
                        branch 'feature_fix_racecond'
                    }
                    steps {
                        echo "Executing on agent: ${env.NODE_NAME}"
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-unit.xml test\\unit
                            '''
                        }
                    }
                }

                stage('REST API Tests') {
                    agent { label 'rest-tests' }
                    when {
                        branch 'feature_fix_racecond'
                    }
                    steps {
                        echo "Executing on agent: ${env.NODE_NAME}"
                        unstash 'source-code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            bat '''
                            REM Start Flask API
                            set FLASK_APP=${FLASK_APP_PATH}
                            start flask run
                            timeout /t 20 > nul

                            REM Start WireMock
                            start java -jar ${WIREMOCK_JAR_PATH} --port 9090 --root-dir ${WIREMOCK_ROOT_DIR}
                            timeout /t 15 > nul

                            REM Execute REST API Tests
                            set PYTHONPATH=%WORKSPACE%
                            pytest --junitxml=result-rest.xml test\\rest
                            '''
                        }
                    }
                }
            }
        }

        stage('Results') {
            agent { label 'Principal' }
            steps {
                echo "Executing on agent: ${env.NODE_NAME}"
                junit 'result*.xml'
            }
        }
    }
}

